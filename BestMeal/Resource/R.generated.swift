//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `CardSwipeViewController`, and contains static references to 1 segues.
    struct cardSwipeViewController {
      /// Segue identifier `toList`.
      static let toList: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CardSwipeViewController, FavoritePlaceListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toList")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toList`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toList(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CardSwipeViewController, FavoritePlaceListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cardSwipeViewController.toList, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RegisterViewController`, and contains static references to 1 segues.
    struct registerViewController {
      /// Segue identifier `toSearch`.
      static let toSearch: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, SearchViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSearch")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toSearch`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSearch(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, SearchViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.toSearch, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SearchViewController`, and contains static references to 1 segues.
    struct searchViewController {
      /// Segue identifier `toCards`.
      static let toCards: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchViewController, CardSwipeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toCards")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toCards`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCards(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchViewController, CardSwipeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchViewController.toCards, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `DetailedInfo`.
    static let detailedInfo = _R.storyboard.detailedInfo()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `List`.
    static let list = _R.storyboard.list()
    /// Storyboard `Register`.
    static let register = _R.storyboard.register()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `SwipeCards`.
    static let swipeCards = _R.storyboard.swipeCards()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailedInfo", bundle: ...)`
    static func detailedInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailedInfo)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "List", bundle: ...)`
    static func list(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.list)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Register", bundle: ...)`
    static func register(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.register)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SwipeCards", bundle: ...)`
    static func swipeCards(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.swipeCards)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityNetworkClient = true
    static let comAppleSecurityPersonalInformationLocation = true

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `9637-check.json`.
    static let checkJson = Rswift.FileResource(bundle: R.hostingBundle, name: "9637-check", pathExtension: "json")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "9637-check", withExtension: "json")`
    static func checkJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.checkJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Food`.
    static let food = Rswift.ImageResource(bundle: R.hostingBundle, name: "Food")
    /// Image `backGroundImage`.
    static let backGroundImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "backGroundImage")
    /// Image `breakfast-3765559_1920`.
    static let breakfast3765559_1920 = Rswift.ImageResource(bundle: R.hostingBundle, name: "breakfast-3765559_1920")
    /// Image `call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "call")
    /// Image `goBackButtonImage`.
    static let goBackButtonImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "goBackButtonImage")
    /// Image `iconfinder_17_google_play_353462`.
    static let iconfinder_17_google_play_353462 = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconfinder_17_google_play_353462")
    /// Image `listButtonImage`.
    static let listButtonImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "listButtonImage")
    /// Image `lunch`.
    static let lunch = Rswift.ImageResource(bundle: R.hostingBundle, name: "lunch")
    /// Image `noImage`.
    static let noImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "noImage")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `zoom_saga`.
    static let zoom_saga = Rswift.ImageResource(bundle: R.hostingBundle, name: "zoom_saga")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Food", bundle: ..., traitCollection: ...)`
    static func food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backGroundImage", bundle: ..., traitCollection: ...)`
    static func backGroundImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backGroundImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "breakfast-3765559_1920", bundle: ..., traitCollection: ...)`
    static func breakfast3765559_1920(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.breakfast3765559_1920, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "goBackButtonImage", bundle: ..., traitCollection: ...)`
    static func goBackButtonImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goBackButtonImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconfinder_17_google_play_353462", bundle: ..., traitCollection: ...)`
    static func iconfinder_17_google_play_353462(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconfinder_17_google_play_353462, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "listButtonImage", bundle: ..., traitCollection: ...)`
    static func listButtonImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listButtonImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lunch", bundle: ..., traitCollection: ...)`
    static func lunch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lunch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noImage", bundle: ..., traitCollection: ...)`
    static func noImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "zoom_saga", bundle: ..., traitCollection: ...)`
    static func zoom_saga(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.zoom_saga, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Register"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `CardViewCell`.
    static let cardViewCell = _R.nib._CardViewCell()
    /// Nib `ListPlaceImageCell`.
    static let listPlaceImageCell = _R.nib._ListPlaceImageCell()
    /// Nib `ListPlaceNameCell`.
    static let listPlaceNameCell = _R.nib._ListPlaceNameCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CardViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cardViewCell) instead")
    static func cardViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListPlaceImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listPlaceImageCell) instead")
    static func listPlaceImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listPlaceImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ListPlaceNameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listPlaceNameCell) instead")
    static func listPlaceNameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listPlaceNameCell)
    }
    #endif

    static func cardViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardViewCell? {
      return R.nib.cardViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardViewCell
    }

    static func listPlaceImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListPlaceImageCell? {
      return R.nib.listPlaceImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListPlaceImageCell
    }

    static func listPlaceNameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListPlaceNameCell? {
      return R.nib.listPlaceNameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListPlaceNameCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CardViewCell`.
    static let cardViewCell: Rswift.ReuseIdentifier<CardViewCell> = Rswift.ReuseIdentifier(identifier: "CardViewCell")
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "Cell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _CardViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CardViewCell

      let bundle = R.hostingBundle
      let identifier = "CardViewCell"
      let name = "CardViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CardViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardViewCell
      }

      fileprivate init() {}
    }

    struct _ListPlaceImageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ListPlaceImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListPlaceImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListPlaceImageCell
      }

      fileprivate init() {}
    }

    struct _ListPlaceNameCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ListPlaceNameCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListPlaceNameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListPlaceNameCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try detailedInfo.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try list.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try register.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try swipeCards.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct detailedInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailedInfo"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "lunch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lunch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct list: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FavoritePlaceListViewController

      let bundle = R.hostingBundle
      let favoritePlaceListViewController = StoryboardViewControllerResource<FavoritePlaceListViewController>(identifier: "FavoritePlaceListViewController")
      let name = "List"

      func favoritePlaceListViewController(_: Void = ()) -> FavoritePlaceListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritePlaceListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.list().favoritePlaceListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritePlaceListViewController' could not be loaded from storyboard 'List' as 'FavoritePlaceListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct register: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Register"
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.register().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Register' as 'RegisterViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchViewController

      let bundle = R.hostingBundle
      let name = "Search"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Search', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct swipeCards: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cardSwipeViewController = StoryboardViewControllerResource<CardSwipeViewController>(identifier: "CardSwipeViewController")
      let name = "SwipeCards"

      func cardSwipeViewController(_: Void = ()) -> CardSwipeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardSwipeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.swipeCards().cardSwipeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardSwipeViewController' could not be loaded from storyboard 'SwipeCards' as 'CardSwipeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
